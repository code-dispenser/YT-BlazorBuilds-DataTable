@inject CustomerService _customerService;

@page "/styling"
<h1>Styling the Data Table with the style parameters or Func callbacks.</h1>
<p style="margin-top:1.5rem;">
    You can style the Data Table in a variety of ways including just altering the underlying style sheet. The DataPropertyColumns allows for the provision of a string which will be applied to the
    style attribute for either column headers, HeaderStyle parameter, or cell content CellStyle parameter. You provide string values such as: "color:red;background-color:grey;" for example.
</p>
<p>
    Both row (tr elements) and cell (td elements) can also have additional styling added via callback functions that are provided with the respective row data.
    The parameter RowStyleFunc in this example sets the row color to red when the customers surname is James with a country of United Kingdom.
 </p>
 <p>
    The parameter CellStyleFunc in this example sets the background-color to a light blue with a bold font when the customers first name is Paul with a surname of Daniels (That's Magic!').<br />
    You can return a null for no matches which causes blazor to exclude the style attribute instead of just having a empty attribute if an empty string was used. 
</p>
<p>
    Please note, I opted to ignore the CellStyleFunc if the column is using a CellTemplate, but you can easily alter this if you prefer.
</p>
<p>
    In this example the Data Tables DefaultSortColumnIndex has been set to 3, the Country column, and the table title is visible.
</p>
<BusyIndicator IsLoading="@_isLoading" BusyText="... Searching ..." AriaLiveText="@_ariaLoadingText" />

<SearchDemo OnSubmitSearch="HandleSearch" />

<div class="@(_tableVisible ? null : "screen-reader-only")" style="height:@(_tableVisible ? "450px" : "1px");">

    <DataTable TData="CustomerSearchResult" DefaultSortColumnIndex="13" DataSource="@_searchResults" AriaTableTitle="Customer search results:" ShowTableTitle="true" RowStyleFunc="@rowStyle">

        <DataTableColumns>
            <DataPropertyColumn DataProperty="s => s.FirstName" DisplayName="First name" IsSortable="true" CellStyleFunc="cellStyle" />
            <DataPropertyColumn DataProperty="s => s.LastName" DisplayName="Surname" IsSortable="true" />
            <DataPropertyColumn DataProperty="s => s.Company" IsSortable="true" />
            <DataPropertyColumn DataProperty="s => s.Country" IsSortable="true" />
            <DataPropertyColumn DataProperty="s => s.SubscriptionDate" DisplayName="Date" IsSortable="true" Format="yyyy-MM-dd" Alignment="Alignment.Center" HeaderStyle="min-width:15ch;" />

        </DataTableColumns>

    </DataTable>

</div>

@if (_tableVisible)
{
    <p style="margin-top:1.5rem;">@((MarkupString)_entriesFound)</p>
}

@code {

    private List<CustomerSearchResult> _searchResults = [];

    private Func<CustomerSearchResult, string?> rowStyle  = (rowItem) => rowItem.LastName == "James" && rowItem.Country == "United Kingdom" ? "color:red;" : null;
    private Func<CustomerSearchResult, string?> cellStyle = (rowItem) => rowItem.FirstName == "Paul" && rowItem.LastName == "Daniels" ? "background-color:aliceblue;font-weight:bold;" : null;

    private string      _entriesFound    = String.Empty;
    private bool        _tableVisible    = false;
    private bool        _isLoading       = false;
    private string      _ariaLoadingText = String.Empty;

    public async Task HandleSearch(CustomerSearch query)
    {
        Stopwatch stopWatch = Stopwatch.StartNew();

        _ariaLoadingText = "Searching";
        _isLoading       = true;
        _searchResults   = (await _customerService.CustomerSearch(query)).SearchResults.ToList();
        stopWatch.Stop();
        _entriesFound    = $"Results: <b>{_searchResults.Count:N0} entries</b> returned <b>{stopWatch.ElapsedMilliseconds:N0}ms</b> using the search criteria (excludes sorting time if any column sort was used)";
        _tableVisible    = true;
        _isLoading       = false;
        _ariaLoadingText = $"Search completed, {_searchResults.Count} results returned.";
    }


}
