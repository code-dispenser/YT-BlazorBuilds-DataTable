
@typeparam TData
@attribute [CascadingTypeParameter(nameof(TData))]

<CascadingValue Value="this" IsFixed="true">
    @DataTableColumns
</CascadingValue>

@if(_dataTableColumns.Count == 0) return;

<div class="@GlobalValues.DataTable_Class">
    <div class="@GlobalValues.DataTable_Header_Class">
        <div id="@_tableTitleID" class="@BuildClassList(GlobalValues.DataTable_Title_Class, ShowTableTitle == false ? GlobalValues.DataTable_Title_Hidden_Class : "")">@AriaTableTitle</div>
        @if (Filter is not null) @Filter
    </div>

    @if(TopPager is not null)
    {
        <div class="@GlobalValues.DataTable_Paging_Top_Class">
            @TopPager
        </div>
    }

    <div class="@GlobalValues.DataTable_Content_Wrapper_Class">
        @if (_showTableSpinner)
        {
            <div class="@GlobalValues.DataTable_Spinner_Backdrop_Class">
                <span class="@GlobalValues.DataTable_Spinner_Class"></span>
            </div>
        }
        <div class="@GlobalValues.DataTable_Content_Class">
            <table aria-labelledby="@_tableTitleID" aria-rowcount="@_dataSource.Count">

                <thead>
                    <tr class="@BuildClassList(GlobalValues.DataTable_Header_Row_Class)">

                        @foreach (var column in this._dataTableColumns)
                        {
                            @if (column is DataPropertyColumn<TData>)
                            {
                                var ariaSortValue = column.SortDirection == SortDirection.NotSorted ? null : (column.SortDirection == SortDirection.Descending ? "descending" : "ascending");

                                <th class="@BuildClassList(GlobalValues.DataTable_Column_Header_Class, GetAlignmentClass(column.FieldName))" aria-sort="@ariaSortValue" scope="col" style="@column.HeaderStyle">
                                    @{
                                        CheckAddSortable((DataPropertyColumn<TData>)column);
                                    }
                                </th>

                                continue;
                            }

                            <th class="@BuildClassList(GlobalValues.DataTable_Column_Header_Class, GetAlignmentClass(column.FieldName))" scope="col" style="@column.HeaderStyle">

                                @if (column is DataTemplateColumn<TData> templateColumn && templateColumn.HeaderTemplate is not null)
                                {
                                    @templateColumn.HeaderTemplate(column.Title)
                                }
                                else
                                {
                                    @column.Title
                                }
                            </th>
                        }
                        @if (SelectionMode != SelectionMode.None) { AddCheckBoxColumnHeader(); }
                    </tr>
                </thead>
                <tbody>
                    @if (PagingInfo is not null || (PagingInfo is null && VirtualizeItemSizePX < 1))
                    {
                        AddRows();
                    }
                    else
                    {
                        AddVirtualizedRows();
                    }

                    @if (_dataPage.Count == 0)
                    {
                        <tr class="@GlobalValues.DataTable_Row_No_Data_Class"><td colspan="@_dataTableColumns.Count">@_noDataLabel</td></tr>
                    }
                </tbody>
            </table>
        </div>
    </div>



    <div class="@GlobalValues.DataTable_Paging_Bottom_Class">
        @if(BottomPager is not null) @BottomPager
    </div>


</div>

@{
    void CheckAddSortable(DataPropertyColumn<TData> column)
    {   
        @if(true == column.IsSortable)
        {
            <button type="button" class="@GlobalValues.DataTable_Sortable_Column_Class" @onclick="() => HandleColumnHeaderClick(column)">
                <span>@column.Title</span>
                <span class="@BuildClassList(GlobalValues.DataTable_Icon_Class, DataTable<TData>.GetSortIconClass(column.SortDirection))" aria-hidden="true"></span>
            </button>
            return;
        }
        @column.Title
    }

    void AddVirtualizedRows()
    {
        var isRowSelectable = SelectionMode != SelectionMode.None;
        var selectableClass = isRowSelectable ? GlobalValues.DataTable_Row_Selectable_Class : "";

        <Virtualize TItem="TData" Items="@_dataPage" Context="rowItem" ItemSize="@VirtualizeItemSizePX" SpacerElement="tr">
            @{
                var containsRow = _selectedRows.Contains(rowItem);
                var isSelected  = isRowSelectable && containsRow;
                var selectClass = isSelected ? GlobalValues.DataTable_Row_Selected_Class : selectableClass;
            }
            <tr @key="rowItem" class="@BuildClassList(GlobalValues.DataTable_Row_Class, selectClass)" style="@(RowStyleFunc is not null ? RowStyleFunc(rowItem) : null)"
            @onclick="() => HandleOnSelectedRow(rowItem)" >

                @foreach (var column in _dataTableColumns)
                {
                    @if (column is DataPropertyColumn<TData> dataColumn)
                    {
                        var dataValue = rowItem!.GetType()?.GetProperty(column.FieldName)?.GetValue(rowItem);
                        var cellFuncStyle = dataColumn.CellStyleFunc is not null ? dataColumn.CellStyleFunc(rowItem) : null;

                        @if (dataColumn.CellTemplate is null)
                        {
                            <td class="@BuildClassList(GetAlignmentClass(column.FieldName))" style="@($"{column.CellStyle}{(cellFuncStyle is null ? null : cellFuncStyle)}")">
                                @(column.HasFormatString ? String.Format(column.FormatString, dataValue) : dataValue)
                            </td>
                        }
                        else
                        {
                            <td class="@BuildClassList(GetAlignmentClass(column.FieldName))" style="@column.CellStyle">@dataColumn.CellTemplate!(rowItem)</td>
                        }
                        continue;
                    }

                    <td class="@BuildClassList(GetAlignmentClass(column.FieldName))" style="@column.CellStyle">@column.CellTemplate!(rowItem)</td>
                }
                @if (isRowSelectable)
                {
                    <td>
                        <input type="checkbox" class="@GlobalValues.DataTable_Checkbox_Selector_Class" checked="@containsRow)"
                        aria-label="@_selectRowLabel" @onchange="(args) => ToggleSelection((bool)args.Value!, rowItem)" />
                    </td>
                }

            </tr>
        </Virtualize>
    }

    void AddRows()
    {
        var isRowSelectable = SelectionMode != SelectionMode.None;
        var selectableClass = isRowSelectable ? GlobalValues.DataTable_Row_Selectable_Class : "";

        @for (int index = 0; index < _dataPage.Count; index++)
        {
            var rowItem     = _dataPage[index];
            var containsRow = _selectedRows.Contains(rowItem);
            var isSelected  = isRowSelectable && containsRow;
            var selectClass = isSelected ? GlobalValues.DataTable_Row_Selected_Class : selectableClass;

            <tr @key="@rowItem" class="@BuildClassList(GlobalValues.DataTable_Row_Class, selectClass)" style="@(RowStyleFunc is not null ? RowStyleFunc(rowItem) : null)"
            @onclick="() => HandleOnSelectedRow(rowItem)">

                @foreach (var column in _dataTableColumns)
                {
                    @if (column is DataPropertyColumn<TData> dataColumn)
                    {
                        var dataValue = rowItem!.GetType()?.GetProperty(column.FieldName)?.GetValue(rowItem);
                        var cellFuncStyle = dataColumn.CellStyleFunc is not null ? dataColumn.CellStyleFunc(rowItem) : null;

                        @if (dataColumn.CellTemplate is null)
                        {
                            <td class="@BuildClassList(GetAlignmentClass(column.FieldName))" style="@($"{column.CellStyle}{(cellFuncStyle is null ? null : cellFuncStyle)}")">
                                @(column.HasFormatString ? String.Format(column.FormatString, dataValue) : dataValue)
                            </td>
                        }
                        else
                        {
                           <td class="@BuildClassList(GetAlignmentClass(column.FieldName))" style="@column.CellStyle">@dataColumn.CellTemplate!(rowItem)</td> 
                        }
                        continue;
                    }
                    <td class="@BuildClassList(GetAlignmentClass(column.FieldName))" style="@column.CellStyle">@column.CellTemplate!(rowItem)</td>
                }
                @if (isRowSelectable) { AddCheckBox(rowItem, containsRow); }
            </tr>
        }
    }

    void AddCheckBoxColumnHeader()
    {
        <th class="@BuildClassList(GlobalValues.DataTable_Column_Header_Class)"  scope="col" style="width:2rem;">
            <span aria-label="@_selectRowLabel"></span> <!-- NVDA did not read the label when on the th tag so added the span as content -->
        </th>
    }
    void AddCheckBox(TData rowItem, bool containsRow)
    {
        <td style=""><input type="checkbox" class="@GlobalValues.DataTable_Checkbox_Selector_Class" checked="@containsRow" 
            aria-label="@_selectRowLabel" @onchange="(args) => ToggleSelection((bool)args.Value!, rowItem)" /></td>
    }
}